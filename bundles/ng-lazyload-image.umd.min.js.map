{"version":3,"sources":["ng://ng-lazyload-image/src/util/css.util.ts","ng://ng-lazyload-image/src/util/util.ts","ng://ng-lazyload-image/src/shared-preset/preset.ts","ng://ng-lazyload-image/src/scroll-preset/rect.ts","ng://ng-lazyload-image/src/scroll-preset/scroll-listener.ts","ng://ng-lazyload-image/src/scroll-preset/preset.ts","ng://ng-lazyload-image/src/lazyload-image.directive.ts","ng://ng-lazyload-image/src/lazyload-image.ts","ng://ng-lazyload-image/src/hooks-factory.ts","ng://ng-lazyload-image/src/lazyload-image.module.ts","ng://ng-lazyload-image/src/intersection-observer-preset/intersection-listener.ts","ng://ng-lazyload-image/src/intersection-observer-preset/preset.ts"],"names":["cssClassNames","addCssClassName","element","cssClassName","className","includes","isWindowDefined","window","isChildOfPicture","Boolean","parentElement","nodeName","toLowerCase","isImageElement","setImage","imagePath","useSrcset","srcset","src","style","backgroundImage","setSources","attrName","image","sources","getElementsByTagName","i","length","attrValue","getAttribute","setSourcesToDefault","setSourcesToLazy","setSourcesToError","setImageAndSources","setSourcesFn","setImageAndSourcesToDefault","setImageAndSourcesToLazy","setImageAndSourcesToError","sharedPreset","finally","_a","loadImage","img","parentClone","parentNode","cloneNode","Image","sizes","Observable","create","observer","onload","next","complete","onerror","err","error","setErrorImage","errorImagePath","setLoadedImage","setup","defaultImagePath","hasCssClassName","removeCssClassName","replace","Rect","fromElement","getBoundingClientRect","left","top","right","bottom","empty","fromWindow","_window","innerWidth","innerHeight","prototype","inflate","inflateBy","this","intersectsWith","rect","getIntersectionWith","Math","max","min","scrollListeners","WeakMap","getScrollListener","scrollTarget","addEventListener","console","warn","has","get","listener","sampleObservable","obs","scheduler","pipe","sampleTime","share","startWith","handler","event","options","passive","capture","removeEventListener","set","scrollPreset","Object","assign","isVisible","getWindow","offset","scrollContainer","elementBounds","windowBounds","intersection","getObservable","attributes","scrollObservable","undefined","LazyLoadImageDirective","ngOnChanges","propertyChanges$","elementRef","nativeElement","lazyImage","defaultImage","errorImage","ngAfterContentInit","_this","ngZone","runOutsideAngular","scrollSubscription","tap","hooks","switchMap","lazyLoadImage","hookSet","filter","take","mergeMap","map","catchError","of","subscribe","success","onLoad","emit","ngOnDestroy","subscription","isUnsubscribed","forEach","unsubscribe","Directive","args","selector","ElementRef","NgZone","Optional","type","Inject","Input","Output","el","EventEmitter","ReplaySubject","cretateHooks","preset","keys","key","LazyLoadImageModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports","observers","intersectionSubject","Subject","loadingCallback","entrys","entry","getIntersectionObserver","root","rootMargin","IntersectionObserver","observe","target","unobserve","intersectionObserverPreset","isIntersecting","_getInterObserver"],"mappings":"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","sourcesContent":["export const cssClassNames = {\n    loaded: 'ng-lazyloaded',\n    loading: 'ng-lazyloading',\n    failed: 'ng-failed-lazyloaded',\n};\n\nexport function removeCssClassName(element: HTMLImageElement | HTMLDivElement, cssClassName: string) {\n    element.className = element.className.replace(cssClassName, '');\n}\n\nexport function addCssClassName(element: HTMLImageElement | HTMLDivElement, cssClassName: string) {\n    if (!element.className.includes(cssClassName)) {\n        element.className += ` ${cssClassName}`;\n    }\n}\n\nexport function hasCssClassName(element: HTMLImageElement | HTMLDivElement, cssClassName: string) {\n    return element.className && element.className.includes(cssClassName);\n}\n","export function isWindowDefined() {\n  return typeof window !== 'undefined';\n}\n\nexport function isChildOfPicture(element: HTMLImageElement | HTMLDivElement): boolean {\n  return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');\n}\n\nexport function isImageElement(element: HTMLImageElement | HTMLDivElement): element is HTMLImageElement {\n  return element.nodeName.toLowerCase() === 'img';\n}\n\nexport function setImage(element: HTMLImageElement | HTMLDivElement, imagePath: string, useSrcset: boolean) {\n  if (isImageElement(element)) {\n    if (useSrcset) {\n      element.srcset = imagePath;\n    } else {\n      element.src = imagePath;\n    }\n  } else {\n    element.style.backgroundImage = `url('${imagePath}')`;\n  }\n  return element;\n}\n\nfunction setSources(attrName: string) {\n  return (image: HTMLImageElement) => {\n    const sources = image.parentElement.getElementsByTagName('source');\n    for (let i = 0; i < sources.length; i++) {\n      const attrValue = sources[i].getAttribute(attrName);\n      if (attrValue) {\n        sources[i].srcset = attrValue;\n      }\n    }\n  };\n}\n\nconst setSourcesToDefault = setSources('defaultImage');\nexport const setSourcesToLazy = setSources('lazyLoad');\nconst setSourcesToError = setSources('errorImage');\n\nfunction setImageAndSources(setSourcesFn: (image: HTMLImageElement) => void) {\n  return (element: HTMLImageElement | HTMLDivElement, imagePath: string, useSrcset: boolean) => {\n    if (isImageElement(element) && isChildOfPicture(element)) {\n      setSourcesFn(element);\n    }\n    if (imagePath) {\n      setImage(element, imagePath, useSrcset);\n    }\n  };\n}\n\nexport const setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);\nexport const setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);\nexport const setImageAndSourcesToError = setImageAndSources(setSourcesToError);\n","import { Observable } from 'rxjs';\nimport {\n  cssClassNames,\n  hasCssClassName,\n  removeCssClassName,\n  addCssClassName,\n  isImageElement,\n  isChildOfPicture,\n  setSourcesToLazy,\n  setImage,\n  setImageAndSourcesToError,\n  setImageAndSourcesToLazy,\n  setImageAndSourcesToDefault,\n} from '../util';\nimport {\n  FinallyFn,\n  LoadImageFn,\n  SetErrorImageFn,\n  SetLoadedImageFn,\n  SetupFn\n} from '../types';\n\nconst end: FinallyFn = ({ element }) => addCssClassName(element, cssClassNames.loaded);\n\nexport const loadImage: LoadImageFn = ({ element, useSrcset, imagePath }) => {\n  let img: HTMLImageElement;\n  if (isImageElement(element) && isChildOfPicture(element)) {\n    const parentClone = element.parentNode.cloneNode(true) as HTMLPictureElement;\n    img = parentClone.getElementsByTagName('img')[0];\n    setSourcesToLazy(img);\n    setImage(img, imagePath, useSrcset);\n  } else {\n    img = new Image();\n    if (isImageElement(element) && element.sizes) {\n      img.sizes = element.sizes;\n    }\n    if (useSrcset) {\n      img.srcset = imagePath;\n    } else {\n      img.src = imagePath;\n    }\n  }\n\n  return Observable.create(observer => {\n    img.onload = () => {\n      observer.next(imagePath);\n      observer.complete();\n    };\n    img.onerror = err => {\n      observer.error(null);\n    };\n  });\n};\n\nconst setErrorImage: SetErrorImageFn = ({ element, errorImagePath, useSrcset }) => {\n  setImageAndSourcesToError(element, errorImagePath, useSrcset);\n  addCssClassName(element, cssClassNames.failed);\n};\n\nconst setLoadedImage: SetLoadedImageFn = ({ element, imagePath, useSrcset }) => {\n  setImageAndSourcesToLazy(element, imagePath, useSrcset);\n};\n\nconst setup: SetupFn = ({ element, defaultImagePath, useSrcset }) => {\n  setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);\n\n  if (hasCssClassName(element, cssClassNames.loaded)) {\n    removeCssClassName(element, cssClassNames.loaded);\n  }\n};\n\nexport const sharedPreset = {\n  finally: end,\n  loadImage,\n  setErrorImage,\n  setLoadedImage,\n  setup\n};\n","export class Rect {\n  static empty: Rect = new Rect(0, 0, 0, 0);\n\n  left: number;\n  top: number;\n  right: number;\n  bottom: number;\n\n  constructor(left: number, top: number, right: number, bottom: number) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n  }\n\n  static fromElement(element: HTMLElement): Rect {\n    const { left, top, right, bottom } = element.getBoundingClientRect();\n\n    if (left === 0 && top === 0 && right === 0 && bottom === 0) {\n      return Rect.empty;\n    } else {\n      return new Rect(left, top, right, bottom);\n    }\n  }\n\n  static fromWindow(_window: Window): Rect {\n    return new Rect(0, 0, _window.innerWidth, _window.innerHeight);\n  }\n\n  inflate(inflateBy: number) {\n    this.left -= inflateBy;\n    this.top -= inflateBy;\n    this.right += inflateBy;\n    this.bottom += inflateBy;\n  }\n\n  intersectsWith(rect: Rect): boolean {\n    return rect.left < this.right && this.left < rect.right && rect.top < this.bottom && this.top < rect.bottom;\n  }\n\n  getIntersectionWith(rect: Rect): Rect {\n    const left = Math.max(this.left, rect.left);\n    const top = Math.max(this.top, rect.top);\n    const right = Math.min(this.right, rect.right);\n    const bottom = Math.min(this.bottom, rect.bottom);\n\n    if (right >= left && bottom >= top) {\n      return new Rect(left, top, right, bottom);\n    } else {\n      return Rect.empty;\n    }\n  }\n}\n","import { empty, Observable } from 'rxjs';\nimport { sampleTime, share, startWith } from 'rxjs/operators';\nimport { isWindowDefined } from '../util';\n\nconst scrollListeners = new WeakMap<any, Observable<any>>();\n\nexport function sampleObservable(obs: Observable<any>, scheduler?: any) {\n  return obs.pipe(\n    sampleTime(100, scheduler),\n    share(),\n    startWith('')\n  );\n}\n\n// Only create one scroll listener per target and share the observable.\n// Typical, there will only be one observable per application\nexport const getScrollListener = (scrollTarget): Observable<Event | String> => {\n  if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {\n    if (isWindowDefined()) {\n      console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');\n    }\n    return empty();\n  }\n  if (scrollListeners.has(scrollTarget)) {\n    return scrollListeners.get(scrollTarget);\n  }\n\n  const srollEvent = Observable.create(observer => {\n    const eventName = 'scroll';\n    const handler = event => observer.next(event);\n    const options = { passive: true, capture: false };\n    scrollTarget.addEventListener(eventName, handler, options);\n    return () => scrollTarget.removeEventListener(eventName, handler, options);\n  });\n\n  const listener = sampleObservable(srollEvent);\n  scrollListeners.set(scrollTarget, listener);\n  return listener;\n};\n","import { startWith } from 'rxjs/operators';\nimport { sharedPreset } from '../shared-preset/preset';\nimport { Attributes, GetObservableFn, HookSet, IsVisibleFn } from '../types';\nimport { isWindowDefined } from '../util';\nimport { Rect } from './rect';\nimport { getScrollListener } from './scroll-listener';\n\nexport const isVisible: IsVisibleFn<Event> = ({ element, offset, scrollContainer }, getWindow = () => window) => {\n  const elementBounds = Rect.fromElement(element);\n  if (elementBounds === Rect.empty) {\n    return false;\n  }\n  const windowBounds = Rect.fromWindow(getWindow());\n  elementBounds.inflate(offset);\n\n  if (scrollContainer) {\n    const scrollContainerBounds = Rect.fromElement(scrollContainer);\n    const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);\n    return elementBounds.intersectsWith(intersection);\n  } else {\n    return elementBounds.intersectsWith(windowBounds);\n  }\n};\n\nconst getObservable: GetObservableFn<Event | String> = (attributes: Attributes) => {\n  if (attributes.scrollObservable) {\n    return attributes.scrollObservable.pipe(startWith(''));\n  }\n  if (attributes.scrollContainer) {\n    return getScrollListener(attributes.scrollContainer);\n  }\n  return getScrollListener(isWindowDefined() ? window : undefined);\n};\n\nexport const scrollPreset: HookSet<Event | String> = Object.assign({}, sharedPreset, {\n  isVisible,\n  getObservable\n});\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { cretateHooks } from './hooks-factory';\nimport { lazyLoadImage } from './lazyload-image';\nimport { Attributes, HookSet, ModuleOptions } from './types';\nimport { isWindowDefined } from './util';\n\nexport interface IOnLoadedPayload {\n    success: boolean,\n    element: ElementRef\n}\n\n@Directive({\n    selector: '[lazyLoad]'\n})\nexport class LazyLoadImageDirective implements OnChanges, AfterContentInit, OnDestroy {\n    @Input('lazyLoad') lazyImage;   // The image to be lazy loaded\n    @Input() defaultImage: string;  // The image to be displayed before lazyImage is loaded\n    @Input() errorImage: string;    // The image to be displayed if lazyImage load fails\n    @Input() scrollTarget: any;     // Scroll container that contains the image and emits scoll events\n    @Input() scrollObservable;      // Pass your own scroll emitter\n    @Input() offset: number;        // The number of px a image should be loaded before it is in view port\n    @Input() useSrcset: boolean;    // Whether srcset attribute should be used instead of src\n    @Output() onLoad: EventEmitter<IOnLoadedPayload> = new EventEmitter(); // Callback when an image is loaded\n    private propertyChanges$: ReplaySubject<Attributes>;\n    private elementRef: ElementRef;\n    private ngZone: NgZone;\n    private scrollSubscription;\n    private hooks: HookSet<any>;\n\n    constructor(el: ElementRef, ngZone: NgZone, @Optional() @Inject('options') options?: ModuleOptions) {\n        this.elementRef = el;\n        this.ngZone = ngZone;\n        this.propertyChanges$ = new ReplaySubject();\n        this.hooks = cretateHooks(options);\n    }\n\n    ngOnChanges() {\n        this.propertyChanges$.next({\n            element: this.elementRef.nativeElement,\n            imagePath: this.lazyImage,\n            defaultImagePath: this.defaultImage,\n            errorImagePath: this.errorImage,\n            useSrcset: this.useSrcset,\n            offset: this.offset | 0,\n            scrollContainer: this.scrollTarget,\n            scrollObservable: this.scrollObservable\n        });\n    }\n\n    ngAfterContentInit() {\n        // Disable lazy load image in server side\n        if (!isWindowDefined()) {\n            return null;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            this.scrollSubscription = this.propertyChanges$.pipe(\n                tap(attributes => this.hooks.setup(attributes)),\n                switchMap(attributes => this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes)))\n            ).subscribe(success => this.onLoad.emit({\n                element: this.elementRef,\n                success: success\n            }));\n        });\n    }\n\n    ngOnDestroy() {\n        [this.scrollSubscription]\n            .filter(subscription => subscription && !subscription.isUnsubscribed)\n            .forEach(subscription => subscription.unsubscribe());\n    }\n}\n","import { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { Attributes, HookSet } from './types';\n\nexport function lazyLoadImage<E>(hookSet: HookSet<E>, attributes: Attributes) {\n  return (scrollObservable: Observable<E>) => {\n    return scrollObservable.pipe(\n      filter(event =>\n        hookSet.isVisible({\n          element: attributes.element,\n          event: event,\n          offset: attributes.offset,\n          scrollContainer: attributes.scrollContainer\n        })\n      ),\n      take(1),\n      mergeMap(() => hookSet.loadImage(attributes)),\n      tap(imagePath =>\n        hookSet.setLoadedImage({\n          element: attributes.element,\n          imagePath,\n          useSrcset: attributes.useSrcset\n        })\n      ),\n      map(() => true),\n      catchError(() => {\n        hookSet.setErrorImage(attributes);\n        return of(false);\n      }),\n      tap(() => hookSet.finally(attributes))\n    );\n  };\n}\n","import { scrollPreset } from './scroll-preset';\nimport { HookSet, ModuleOptions } from './types';\n\nexport function cretateHooks<E>(options?: ModuleOptions<E>): HookSet<any> {\n    if (!options) {\n        return scrollPreset;\n    }\n    const hooks = {};\n    if (options.preset) {\n        Object.assign(hooks, options.preset);\n    } else {\n        Object.assign(hooks, scrollPreset);\n    }\n    Object.keys(options)\n        .filter(key => key !== 'preset')\n        .forEach(key => {\n            hooks[key] = options[key];\n        });\n    return hooks as HookSet<any>;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { LazyLoadImageDirective } from './lazyload-image.directive';\nimport { ModuleOptions } from './types';\n\n@NgModule({\n  declarations: [LazyLoadImageDirective],\n  exports: [LazyLoadImageDirective]\n})\nexport class LazyLoadImageModule {\n  static forRoot(options: ModuleOptions): ModuleWithProviders {\n    return {\n      ngModule: LazyLoadImageModule,\n      providers: [{ provide: 'options', useValue: options }]\n    };\n  }\n}\n","import { empty, Observable, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Attributes } from '../types';\nimport { isWindowDefined } from '../util';\n\ntype ObserverOptions = {\n  root?: Element;\n  rootMargin?: string;\n};\n\nconst observers = new WeakMap<Element | {}, IntersectionObserver>();\n\nconst intersectionSubject = new Subject<IntersectionObserverEntry>();\n\nfunction loadingCallback(entrys: IntersectionObserverEntry[]) {\n  entrys.forEach(entry => intersectionSubject.next(entry));\n}\n\nexport const getIntersectionObserver = (attributes: Attributes) => {\n  if (!attributes.scrollContainer && !isWindowDefined()) {\n    return empty();\n  }\n\n  const options: ObserverOptions = {\n    root: attributes.scrollContainer\n  };\n  if (attributes.offset) {\n    options.rootMargin = `${attributes.offset}px`;\n  }\n\n  const scrollContainer = attributes.scrollContainer || window;\n\n  let observer = observers.get(scrollContainer);\n\n  if (!observer) {\n    observer = new IntersectionObserver(loadingCallback, options);\n    observers.set(scrollContainer, observer);\n  }\n\n  observer.observe(attributes.element);\n\n  return Observable.create(obs => {\n    const subscription = intersectionSubject.pipe(filter(entry => entry.target === attributes.element)).subscribe(obs);\n    return () => {\n      subscription.unsubscribe();\n      observer.unobserve(attributes.element);\n    };\n  });\n};\n","import { sharedPreset } from '../shared-preset/preset';\nimport { Attributes, GetObservableFn, HookSet, IsVisibleFn } from '../types';\nimport { getIntersectionObserver } from './intersection-listener';\n\nexport const isVisible: IsVisibleFn<IntersectionObserverEntry> = ({ event }) => {\n  return event.isIntersecting;\n};\n\nexport const getObservable: GetObservableFn<IntersectionObserverEntry> = (attributes: Attributes, _getInterObserver = getIntersectionObserver) => {\n  if (attributes.scrollObservable) {\n    return attributes.scrollObservable;\n  }\n  return _getInterObserver(attributes);\n};\n\nexport const intersectionObserverPreset: HookSet<IntersectionObserverEntry> = Object.assign({}, sharedPreset, {\n  isVisible,\n  getObservable\n});\n"]}